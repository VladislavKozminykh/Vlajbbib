from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from database import init_db, register_user

TOKEN = 'тут мой код'
init_db()  # Инициализация БД при старте

# Состояния регистрации
REGISTRATION_STATE = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"Привет, {user.first_name}!\n"
        "Для регистрации введите /register"
    )

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Вы ученик или преподаватель?\n"
        "1 - Ученик\n"
        "2 - Преподаватель"
    )
    REGISTRATION_STATE[update.effective_user.id] = {"step": "select_role"}

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    
    if user_id not in REGISTRATION_STATE:
        return
    
    if REGISTRATION_STATE[user_id]["step"] == "select_role":
        if text == "1":
            await update.message.reply_text("Введите ваше ФИО и класс (например: Иванов Иван 10А):")
            REGISTRATION_STATE[user_id] = {"step": "student_info"}
        elif text == "2":
            await update.message.reply_text("Введите ваше ФИО, школу и предмет (например: Петрова Анна Школа№1 Математика):")
            REGISTRATION_STATE[user_id] = {"step": "teacher_info"}
    
    elif REGISTRATION_STATE[user_id]["step"] == "student_info":
        try:
            full_name, class_ = text.rsplit(maxsplit=1)
            register_user(user_id, update.effective_user.username, full_name, "student", class_)
            await update.message.reply_text("Регистрация ученика завершена!")
            del REGISTRATION_STATE[user_id]
        except ValueError:
            await update.message.reply_text("Неверный формат. Введите ФИО и класс через пробел")
    
    elif REGISTRATION_STATE[user_id]["step"] == "teacher_info":
        try:
            full_name, school, subject = text.rsplit(maxsplit=2)
            register_user(user_id, update.effective_user.username, full_name, "teacher", school, subject)
            await update.message.reply_text("Регистрация преподавателя завершена!")
            del REGISTRATION_STATE[user_id]
        except ValueError:
            await update.message.reply_text("Неверный формат. Введите ФИО, школу и предмет через пробелы")

def main():
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    app.run_polling()

if __name__ == "__main__":
    main()
